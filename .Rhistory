bath=getNOAA.bathy(
lon1=min(data$LONGITUDE-0.5),
lon2=max(data$LONGITUDE+0.5),
lat1=min(data$LATITUDE-0.5),
lat2=max(data$LATITUDE+0.5),
resolution=1
)
?marmap
?raster
??raster
??rgdal
?rgdal
install.packages('marmap')
install.packages("marmap")
library(marmap)
# bath=getNOAA.bathy(
#   lon1=min(-80.83),
#   lon2=max(-56.79),
#   lat1=min(35.11),
#   lat2=max(46.89),
#   resolution=10
# )
bath=getNOAA.bathy(
lon1=min(data$LONGITUDE-0.5),
lon2=max(data$LONGITUDE+0.5),
lat1=min(data$LATITUDE-0.5),
lat2=max(data$LATITUDE+0.5),
resolution=1
)
install.packages('rgdal')
install.packages('raster')
install.packages("raster")
#source("API/API_header.R")
library(marmap)
# bath=getNOAA.bathy(
#   lon1=min(-80.83),
#   lon2=max(-56.79),
#   lat1=min(35.11),
#   lat2=max(46.89),
#   resolution=10
# )
bath=getNOAA.bathy(
lon1=min(data$LONGITUDE-0.5),
lon2=max(data$LONGITUDE+0.5),
lat1=min(data$LATITUDE-0.5),
lat2=max(data$LATITUDE+0.5),
resolution=1
)
source("../GitHubRepos/emolt_serverside/API/API_header.R")
#source("API/API_header.R")
library(marmap)
## Connect to the database
conn=dbConnector(db_config2)
## Download the last week's status updates for all vessels
lastweek=Sys.Date()-days(7)
data=dbGetQuery(
conn=conn,
statement=paste0(
"SELECT * FROM VESSEL_STATUS WHERE TIMESTAMP > '",
lastweek,
"'"
)
)
data=select(data,REPORT_TYPE,LATITUDE,LONGITUDE,TIMESTAMP,VESSEL_ID)
# bath=getNOAA.bathy(
#   lon1=min(-80.83),
#   lon2=max(-56.79),
#   lat1=min(35.11),
#   lat2=max(46.89),
#   resolution=10
# )
bath=getNOAA.bathy(
lon1=min(data$LONGITUDE-0.5),
lon2=max(data$LONGITUDE+0.5),
lat1=min(data$LATITUDE-0.5),
lat2=max(data$LATITUDE+0.5),
resolution=1
)
?read.bathy
#   lat2=max(46.89),
#   resolution=10
# )
# bath=getNOAA.bathy(
#   lon1=min(data$LONGITUDE-0.5),
#   lon2=max(data$LONGITUDE+0.5),
#   lat1=min(data$LATITUDE-0.5),
#   lat2=max(data$LATITUDE+0.5),
#   resolution=1
# )
bath=readGEBCO.bathy(
file=file.choose(),
resolution=1
)
## Create color ramp
blues=c(
"lightsteelblue4",
"lightsteelblue3",
"lightsteelblue2",
"lightsteelblue1"
)
## Plotting the bathymetry with different colors for land and sea
plot(
bath,
step=100,
deepest.isobath=-1000,
shallowest.isobath=0,
col="darkgray",
image = TRUE,
land = TRUE,
lwd = 0.1,
bpal = list(
c(0, max(bath), "gray"),
c(min(bath),0,blues)
),
main=paste0("ALL eMOLT VESSELS with Satellite Transmitters \nREPORTS FROM: ",lastweek," to ",Sys.Date())
)
lastweek
lastweek=Sys.Date()-months(12)
lastweek
data=dbGetQuery(
conn=conn,
statement=paste0(
"SELECT * FROM VESSEL_STATUS WHERE TIMESTAMP > '",
lastweek,
"'"
)
)
data=select(data,REPORT_TYPE,LATITUDE,LONGITUDE,TIMESTAMP,VESSEL_ID)
## Plot the status report locations
x=subset(data,data$REPORT_TYPE=="SHORT_STATUS")
points(
x$LATITUDE~x$LONGITUDE,
pch=1,
col='red'
)
## Plot data uploads
x=subset(data,data$REPORT_TYPE=="SUMMARY_DATA")
points(
x$LATITUDE~x$LONGITUDE,
pch=1,
col='blue'
)
## Add labels to points
text(
x$LATITUDE~x$LONGITUDE,
labels=x$VESSEL_ID
)
legend(
'topleft',
col=c('blue','red'),
legend=c('Summary Data Upload','Status Report'),
pch=c(1,1),
bty='n',
bg=NULL,
border='black'
)
## Plotting the bathymetry with different colors for land and sea
plot(
bath,
step=100,
deepest.isobath=-1000,
shallowest.isobath=0,
col="darkgray",
image = TRUE,
land = TRUE,
lwd = 0.1,
bpal = list(
c(0, max(bath), "gray"),
c(min(bath),0,blues)
),
main=paste0("ALL eMOLT VESSELS with Satellite Transmitters \nREPORTS FROM: ",lastweek," to ",Sys.Date())
)
## Plot data uploads
x=subset(data,data$REPORT_TYPE=="SUMMARY_DATA")
points(
x$LATITUDE~x$LONGITUDE,
pch=1,
col='blue'
)
nrow(x)
df=read.csv(file.choose())
head(df)
library(usethis)
?use_data
??use_data
install.packages('usethis')
library(usethis)
document()
?document
install.packages('dev.tools')
install.packages('devtools')
library(devtools)
document()
sensors
ls()
use_data(df,internal=FALSE)
document()
rm(ls())
rm(list=ls())
ls
ls()
document()
?ExpectedRegionCheck
ExpectedRegionCheck(
region='North_Atlantic',
dataframe=df
)
df
colnames(df)
df=select(df,DATETIME,TEMPERATURE,PRESSURE,LATITUDE,LONGITUDE)
library(dplyr)
df=select(df,DATETIME,TEMPERATURE,PRESSURE,LATITUDE,LONGITUDE)
df
colnames(df)
colnames(df)=c('TIMESTAMP','TEMPERATURE','PRESSURE','LATITUDE','LONGITUDE')
use_data(df,internal=FALSE)
use_data(df,internal=FALSE,overwrite=TRUE)
df
head(df)
document()
ExpectedRegionCheck(df)
ExpectedRegionCheck(
region='North_Atlantic',
dataframe=df
)
df
region
ExpectedRegionCheck("North_Atlantic",df)
ExpectedRegionCheck("North_Atlantic",dataframe=df)
x=ExpectedRegionCheck("North_Atlantic",dataframe=df)
x
colnames(x)
region=="North_Atlantic"
region="North_Atlantic"
## Grab the coordinates based on the region
if(region=='Alaska'){
minLon=-180
maxLon=-125
minLat=45
maxLat=90
}
if(region=='North_Atlantic'){
minLon=-75
maxLon=30
minLat=0
maxLat=90
}
if(region=='Greenland'){
minLon=-60
maxLon=-15
minLat=55
maxLat=90
}
if(region=='New_Zealand'){
minLon=160
maxLon=175
minLat=-50
maxLat=-30
}
if(region=='North_Sea_Baltic'){
minLon=-15
maxLon=30
minLat=45
maxLat=60
}
dataframe$OutRegion=NA
dataframe=df
dataframe$OutRegion=NA
## Check if the specified point is within the specified region
dataframe$OutRegion=ifelse(
dataframe$LONGITUDE<=maxLon&dataframe$LONGITUDE>=minLon&dataframe$LATITUDE<=maxLat&dataframe$LATITUDE>=minLat,
FALSE,
TRUE
)
dataframe
head(dataframe)
#' @returns Returns the original dataframe with an additional column called
#' "OutRegion". The new column contains a TRUE/FALSE value describing whether
#' the points in the data occur outside of the specified region (TRUE)
#' @examples
#' ExpectedRegionCheck(
#'      region='North_Atlantic',
#'      dataframe=df
#'      )
ExpectedRegionCheck=function(region,dataframe){
## Grab the coordinates based on the region
if(region=='Alaska'){
minLon=-180
maxLon=-125
minLat=45
maxLat=90
}
if(region=='North_Atlantic'){
minLon=-75
maxLon=30
minLat=0
maxLat=90
}
if(region=='Greenland'){
minLon=-60
maxLon=-15
minLat=55
maxLat=90
}
if(region=='New_Zealand'){
minLon=160
maxLon=175
minLat=-50
maxLat=-30
}
if(region=='North_Sea_Baltic'){
minLon=-15
maxLon=30
minLat=45
maxLat=60
}
dataframe$OutRegion=NA
## Check if the specified point is within the specified region
dataframe$OutRegion=ifelse(
dataframe$LONGITUDE<=maxLon&dataframe$LONGITUDE>=minLon&dataframe$LATITUDE<=maxLat&dataframe$LATITUDE>=minLat,
FALSE,
TRUE
)
return(dataframe)
}
ExpectedRegionCheck(region='North_Atlantic',dataframe=df)
df
ExpectedRegionCheck(region='North_Atlantic',dataframe=df)
document()
## Select the column of interest
data_col=which(colnames(dataframe)==column)
## ---------------------------
## Script name: RateOfChangeCheck.R
##
## Purpose of script: This test is applied per segment (Up-Down-Bottom), and
##   inspects the segments on a rate of change exceeding a threshold defined by
##   the operator. In this case the thresholds are based on the IOOS examples
##   (U.S. Integrated Ocean Observing System, 2020), where the rate of change
##   between measurement Tn-1 and Tn must be less than three standard deviations
##   (3*SD). The SD of the T time series is computed over the full segment.
##
## Date Created: 2022-11-03
##
## Software code created by U.S. Government employees is
## not subject to copyright in the United States
## (17 U.S.C. ยง105).
##
## Email: george.maynard@noaa.gov
##
## ---------------------------
## Notes:
##
##
## ---------------------------
#' RateofChangeCheck
#'
#' This test is applied per segment (Up-Down-Bottom), and
#'   inspects the segments on a rate of change exceeding a threshold defined by
#'   the operator. In this case the thresholds are based on the IOOS examples
#'   (U.S. Integrated Ocean Observing System, 2020), where the rate of change
#'   between measurement Tn-1 and Tn must be less than three standard deviations
#'   (3*SD). The SD of the T time series is computed over the full segment.
#' @param column The column name to apply the test to. There is no default value.
#' @param threshold The threshold (in SD) of change that is considered
#' acceptable. The default value is 3.
#' @param dataframe a dataframe containing at least the column TIMESTAMP in the
#' format yyyy-mm-dd HH:MM:SS and one parameter of interest. There is no default
#' value.
#' @returns Returns the original dataframe with an additional column called
#' "FailRateCheck". The new column contains a TRUE/FALSE value describing
#' whether the points fail the rate check (bad data = TRUE).
#' @examples
#' RateofChangeCheck(
#'      column="TEMPERATURE",
#'      threshold=3,
#'      dataframe=df
#'      )
RateofChangeCheck=function(column,threshold=3,dataframe){
## Select the column of interest
data_col=which(colnames(dataframe)==column)
## Calculate the standard deviation for the full dataset
SD=sd(dataframe[,data_col])
## Order the data by time
dataframe=dataframe[order(dataframe$TIMESTAMP),]
## Create an empty vector to store the rate of change in
ROC=rep(NA,nrow(dataframe))
## Calculate the rate of change (in SD) between each measurement
for(i in 2:nrow(dataframe)){
ROC[i]=abs(dataframe[i,data_col]-dataframe[i-1,data_col])/SD
}
dataframe$FailRateCheck=ROC>threshold
return(dataframe)
}
RateofChangeCheck(column="TEMPERATURE",dataframe=df)
x=RateofChangeCheck(column="TEMPERATURE",dataframe=df)
table(x$FailRateCheck)
head(x)
x$PRESSURE[3]=111
x=RateofChangeCheck(column="TEMPERATURE",dataframe=x)
x
head(x)
x=RateofChangeCheck(column="PRESSURE",dataframe=x)
head(x)
SD(x$PRESSURE)
sd(x$PRESSURE)
source("../GitHubRepos/emolt_serverside/API/API_header.R")
## Connect to the database
conn=dbConnector(db_config2)
## Download the last week's status updates for all vessels
lastweek=Sys.Date()-days(7)
lastweek=Sys.Date()-days(14)
data=dbGetQuery(
conn=conn,
statement=paste0(
"SELECT * FROM VESSEL_STATUS WHERE TIMESTAMP > '",
lastweek,
"'"
)
)
data=select(data,REPORT_TYPE,LATITUDE,LONGITUDE,TIMESTAMP,VESSEL_ID)
#   lat2=max(46.89),
#   resolution=10
# )
# bath=getNOAA.bathy(
#   lon1=min(data$LONGITUDE-0.5),
#   lon2=max(data$LONGITUDE+0.5),
#   lat1=min(data$LATITUDE-0.5),
#   lat2=max(data$LATITUDE+0.5),
#   resolution=1
# )
bath=readGEBCO.bathy(
file=file.choose(),
resolution=10
)
library(marmap)
#   lat2=max(46.89),
#   resolution=10
# )
# bath=getNOAA.bathy(
#   lon1=min(data$LONGITUDE-0.5),
#   lon2=max(data$LONGITUDE+0.5),
#   lat1=min(data$LATITUDE-0.5),
#   lat2=max(data$LATITUDE+0.5),
#   resolution=1
# )
bath=readGEBCO.bathy(
file=file.choose(),
resolution=10
)
## Create color ramp
blues=c(
"lightsteelblue4",
"lightsteelblue3",
"lightsteelblue2",
"lightsteelblue1"
)
## Plotting the bathymetry with different colors for land and sea
plot(
bath,
step=100,
deepest.isobath=-1000,
shallowest.isobath=0,
col="darkgray",
image = TRUE,
land = TRUE,
lwd = 0.1,
bpal = list(
c(0, max(bath), "gray"),
c(min(bath),0,blues)
),
main=paste0("ALL eMOLT VESSELS with Satellite Transmitters \nREPORTS FROM: ",lastweek," to ",Sys.Date())
)
## Plot the status report locations
x=subset(data,data$REPORT_TYPE=="SHORT_STATUS")
points(
x$LATITUDE~x$LONGITUDE,
pch=1,
col='red'
)
## Add labels to points
text(
x$LATITUDE~x$LONGITUDE,
labels=x$VESSEL_ID
)
## Plotting the bathymetry with different colors for land and sea
plot(
bath,
step=100,
deepest.isobath=-1000,
shallowest.isobath=0,
col="darkgray",
image = TRUE,
land = TRUE,
lwd = 0.1,
bpal = list(
c(0, max(bath), "gray"),
c(min(bath),0,blues)
),
main=paste0("ALL eMOLT VESSELS with Satellite Transmitters \nREPORTS FROM: ",lastweek," to ",Sys.Date())
)
## Plot the status report locations
x=subset(data,data$REPORT_TYPE=="SHORT_STATUS")
points(
x$LATITUDE~x$LONGITUDE,
pch=1,
col='red'
)
## Add labels to points
text(
x$LATITUDE~x$LONGITUDE,
labels=x$VESSEL_ID
)
